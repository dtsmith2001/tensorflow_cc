#!/bin/bash
set -e

# Test whether one version ($1) is less than or equal to other ($2).
function version_gt {
    test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"
}

#function check_bazel_version {
#	 [ "$(bazel version 2>/dev/null | grep 'Build label' | cut -f3 -d' ')" == 0.26.1 ] && echo bazel ok
#}

# configure environmental variables
export CC_OPT_FLAGS=${CC_OPT_FLAGS:-"-march=native"}
export TF_NEED_GCP=${TF_NEED_GCP:-0}
export TF_NEED_HDFS=${TF_NEED_HDFS:-0}
export TF_NEED_OPENCL=${TF_NEED_OPENCL:-0}
export TF_NEED_OPENCL_SYCL=${TF_NEED_OPENCL_SYCL:-0}
export TF_NEED_TENSORRT=${TF_NEED_TENSORRT:-0}
export TF_NEED_NGRAPH=${TF_NEED_NGRAPH:-0}
export TF_NEED_JEMALLOC=${TF_NEED_JEMALLOC:-1}
export TF_NEED_VERBS=${TF_NEED_VERBS:-0}
export TF_NEED_MKL=${TF_NEED_MKL:-1}
export TF_DOWNLOAD_MKL=${TF_DOWNLOAD_MKL:-1}
export TF_NEED_MPI=${TF_NEED_MPI:-0}
export TF_ENABLE_XLA=${TF_ENABLE_XLA:-1}
export TF_NEED_AWS=${TF_NEED_AWS:-0}
export TF_NEED_GDR=${TF_NEED_GDR:-0}
export TF_CUDA_CLANG=${TF_CUDA_CLANG:-0}
export TF_SET_ANDROID_WORKSPACE=${TF_SET_ANDROID_WORKSPACE:-0}
export TF_NEED_KAFKA=${TF_NEED_KAFKA:-0}
export TF_DOWNLOAD_CLANG=${TF_DOWNLOAD_CLANG:-0}
export TF_NEED_IGNITE=${TF_NEED_IGNITE:-0}
export TF_NEED_ROCM=${TF_NEED_ROCM:-0}
export NCCL_INSTALL_PATH=${NCCL_INSTALL_PATH:-/usr}
export PYTHON_BIN_PATH=${PYTHON_BIN_PATH:-"$(which python3)"}
export PYTHON_LIB_PATH="$($PYTHON_BIN_PATH -c 'import site; print(site.getsitepackages()[0])')"

export bazel_n_jobs="@BAZEL_N_JOBS@"
export bazel_local_cpu_resources="@BAZEL_LOCAL_CPU_RESOURCES@"
export bazel_javacopt="@BAZEL_JAVACOPT_CACHE_MIN@ @BAZEL_JAVACOPT_CACHE_MAX@"
export bazel_jvmopt="@BAZEL_JVMOPT_CACHE_MIN@ @BAZEL_JVMOPT_CACHE_MAX@"

# remove warnings that clutter up the log
export c_cxx_no_warn="--cxxopt=-Wno-unused-result --cxxopt=-Wno-ignored-attributes --cxxopt=-Wno-maybe-uninitialized --cxxopt=-Wno-sign-compare --cxxopt=-Wno-return-type --cxxopt=-Wno-deprecated-declarations --cxxopt=-fPIC --cxxopt=-std=gnu++11 --cxxopt=-Wno-ignored-attributes --copt=-Wno-comment --copt=-Wno-unused-function --copt=-Wno-maybe-uninitialized --copt=-Wno-unused-result --copt=-Wno-deprecated-declarations --copt=-march=native --copt=-Wno-sign-compare --copt=-Wno-unknown-pragmas --copt=-Wno-unused-but-set-parameter --copt=-Wno-return-type --copt=-O3 --copt=-fPIC"

# check if cuda support requested and supported
if [ "@ALLOW_CUDA@" = "ON" ] && hash nvcc 2>/dev/null; then
    echo "CUDA support enabled"
    cuda_config_opts="--config=cuda"
    export TF_NEED_CUDA=1
    export TF_CUDA_COMPUTE_CAPABILITIES=${TF_CUDA_COMPUTE_CAPABILITIES:-"3.5,7.0"}  # default from configure.py
    export TF_CUDA_PATHS=${TF_CUDA_PATHS:-"/opt/cuda,/usr/local/cuda,/usr/local,/usr/cuda,/usr"}
    export TF_CUDA_VERSION="$(nvcc --version | sed -n 's/^.*release \(.*\),.*/\1/p')"
    export TF_NCCL_VERSION="$(find / -name 'libnccl.so.*' | tail -n1 | sed -r 's/^.*\.so\.//')"
    export TF_CUDNN_VERSION="$(find / -name 'libcudnn.so.*' | tail -n1 | sed -r 's/^.*\.so\.//')"

    # choose the right version of CUDA compiler
    if [ -z "$GCC_HOST_COMPILER_PATH" ]; then
        if   hash gcc-8 2>/dev/null && version_gt 8.5 `gcc-8 -dumpversion`; then
            export GCC_HOST_COMPILER_PATH=${GCC_HOST_COMPILER_PATH:-"/usr/bin/gcc-8"}
        elif hash gcc-7 2>/dev/null && version_gt 7.5 `gcc-7 -dumpversion`; then
            export GCC_HOST_COMPILER_PATH=${GCC_HOST_COMPILER_PATH:-"/usr/bin/gcc-7"}
        elif hash gcc-6 2>/dev/null && version_gt 6.4 `gcc-6 -dumpversion`; then
            export GCC_HOST_COMPILER_PATH=${GCC_HOST_COMPILER_PATH:-"/usr/bin/gcc-6"}
        elif hash gcc-5 2>/dev/null && version_gt 5.5 `gcc-5 -dumpversion`; then
            export GCC_HOST_COMPILER_PATH=${GCC_HOST_COMPILER_PATH:-"/usr/bin/gcc-5"}
        elif hash gcc-4 2>/dev/null && version_gt 4.9 `gcc-4 -dumpversion`; then
            export GCC_HOST_COMPILER_PATH=${GCC_HOST_COMPILER_PATH:-"/usr/bin/gcc-4"}
        else
            echo "No supported CUDA compiler available. If you are sure your compiler"
            echo "version is supported by your CUDA version, please run e.g.:"
            echo "export GCC_HOST_COMPILER_PATH=/usr/bin/gcc"
            echo "before the build. For the list of supported compilers refer to:"
            echo "https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html"
            exit 1
        fi
    fi

    export CLANG_CUDA_COMPILER_PATH=${CLANG_CUDA_COMPILER_PATH:-"/usr/bin/clang"}
    export TF_CUDA_CLANG=${TF_CUDA_CLANG:-0}
else
    echo "CUDA support disabled"
    cuda_config_opts=""
    export TF_NEED_CUDA=0
fi

# configure and build
./configure
bazel build --config=opt \
            --config=monolithic \
            ${bazel_n_jobs} \
            ${bazel_local_cpu_resources} \
            ${bazel_javacopt} \
            ${bazel_jvmopt} \
            ${cuda_config_opts} \
            tensorflow:libtensorflow_cc.so
if [ $? -ne 0 ]
then
	echo "bazel build failed"
else
cat <<- build_artifacts_location
Tensorflow build succeeded

Build artifacts:
	Library
		libtensorflow_cc.so is in tensorflow/bazel-bin/tensorflow

	Header files
		tensorflow/bazel-tensorflow/external/com_google_absl
		tensorflow/bazel-tensorflow/external/eigen_archive
		tensorflow/bazel-tensorflow/external/protobuf_archive/src
		tensorflow/bazel-genfiles

	Note that due to changes in the Tensorflow project, there may be
	additional header directories required. All of these should be under
		tensorflow/bazel-tensorflow
		tensorflow/bazel-genfiles
build_artifacts_location
fi
bazel shutdown
